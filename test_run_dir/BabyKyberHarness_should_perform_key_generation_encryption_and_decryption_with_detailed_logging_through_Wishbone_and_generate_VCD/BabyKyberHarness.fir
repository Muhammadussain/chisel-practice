;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit BabyKyberHarness : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 45:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 55:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 61:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 62:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 63:14]
      skip @[WishboneHost.scala 62:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 65:17]
    when _T_3 : @[WishboneHost.scala 65:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 66:14]
      skip @[WishboneHost.scala 65:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 75:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 76:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 76:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 76:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 76:67]
    when _T_7 : @[WishboneHost.scala 76:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 77:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 78:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 80:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 81:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 82:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 83:14]
      skip @[WishboneHost.scala 76:86]
    else : @[WishboneHost.scala 84:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 84:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 84:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 84:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 84:73]
      when _T_11 : @[WishboneHost.scala 84:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 85:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 86:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 88:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 89:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 90:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 91:14]
        skip @[WishboneHost.scala 84:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 94:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 96:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 97:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 99:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 101:10]
    when _T_12 : @[WishboneHost.scala 101:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 102:118]
      skip @[WishboneHost.scala 101:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 105:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 105:38]
    when _T_14 : @[WishboneHost.scala 105:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 106:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 107:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 108:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 110:26]
      skip @[WishboneHost.scala 105:71]
    else : @[WishboneHost.scala 111:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 111:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 111:45]
      when _T_16 : @[WishboneHost.scala 111:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 112:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 113:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 114:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 115:26]
        skip @[WishboneHost.scala 111:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 118:19]
    when _T_17 : @[WishboneHost.scala 118:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 119:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 119:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 119:16]
      skip @[WishboneHost.scala 118:29]
    else : @[WishboneHost.scala 120:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 120:26]
      when _T_18 : @[WishboneHost.scala 120:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 121:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 122:16]
        skip @[WishboneHost.scala 120:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 127:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 128:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 129:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  extmodule Top : 
    input clk : UInt<1>
    input rst_n : UInt<1>
    input enable : UInt<1>
    input key_enable : UInt<1>
    input encryption_enable : UInt<1>
    input decryption_enable : UInt<1>
    input data_Req : SInt<32>
    input addr_Req : SInt<32>
    input wen_Req : UInt<1>
    input bytelane_Req : UInt<8>
    output data_Resp : SInt<32>
    output key_done : UInt<1>
    output encryption_done : UInt<1>
    output decryption_done : UInt<1>
    
    defname = Top
    
    
  module BabyKyberTop : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip enable : UInt<1>, flip key_enable : UInt<1>, flip encryption_enable : UInt<1>, flip decryption_enable : UInt<1>, cio_babykyber_intr_key : UInt<1>, cio_babykyber_intr_encrypt : UInt<1>, cio_babykyber_intr_decrypt : UInt<1>}
    
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BabyKyber.scala 32:25]
    io.rsp.valid <= validReg @[BabyKyber.scala 33:16]
    io.req.ready <= UInt<1>("h01") @[BabyKyber.scala 34:16]
    wire rdata : SInt<32> @[BabyKyber.scala 36:19]
    inst bkyber of Top @[BabyKyber.scala 39:22]
    bkyber.decryption_done is invalid
    bkyber.encryption_done is invalid
    bkyber.key_done is invalid
    bkyber.data_Resp is invalid
    bkyber.bytelane_Req is invalid
    bkyber.wen_Req is invalid
    bkyber.addr_Req is invalid
    bkyber.data_Req is invalid
    bkyber.decryption_enable is invalid
    bkyber.encryption_enable is invalid
    bkyber.key_enable is invalid
    bkyber.enable is invalid
    bkyber.rst_n is invalid
    bkyber.clk is invalid
    node _bkyber_io_clk_T = asUInt(clock) @[BabyKyber.scala 42:32]
    node _bkyber_io_clk_T_1 = bits(_bkyber_io_clk_T, 0, 0) @[BabyKyber.scala 42:34]
    bkyber.clk <= _bkyber_io_clk_T_1 @[BabyKyber.scala 42:17]
    node _bkyber_io_rst_n_T = asUInt(reset) @[BabyKyber.scala 43:35]
    node _bkyber_io_rst_n_T_1 = eq(_bkyber_io_rst_n_T, UInt<1>("h00")) @[BabyKyber.scala 43:22]
    bkyber.rst_n <= _bkyber_io_rst_n_T_1 @[BabyKyber.scala 43:19]
    bkyber.enable <= io.enable @[BabyKyber.scala 46:20]
    bkyber.key_enable <= io.key_enable @[BabyKyber.scala 47:24]
    bkyber.encryption_enable <= io.encryption_enable @[BabyKyber.scala 48:31]
    bkyber.decryption_enable <= io.decryption_enable @[BabyKyber.scala 49:31]
    bkyber.data_Req is invalid @[BabyKyber.scala 52:22]
    bkyber.addr_Req is invalid @[BabyKyber.scala 53:22]
    bkyber.wen_Req is invalid @[BabyKyber.scala 54:21]
    bkyber.bytelane_Req is invalid @[BabyKyber.scala 55:26]
    io.cio_babykyber_intr_key <= bkyber.key_done @[BabyKyber.scala 59:29]
    io.cio_babykyber_intr_encrypt <= bkyber.encryption_done @[BabyKyber.scala 60:33]
    io.cio_babykyber_intr_decrypt <= bkyber.decryption_done @[BabyKyber.scala 61:33]
    node _T = and(io.req.valid, io.req.bits.isWrite) @[BabyKyber.scala 66:21]
    when _T : @[BabyKyber.scala 66:45]
      node _bkyber_io_data_Req_T = asSInt(io.req.bits.dataRequest) @[BabyKyber.scala 68:51]
      bkyber.data_Req <= _bkyber_io_data_Req_T @[BabyKyber.scala 68:24]
      node _bkyber_io_addr_Req_T = asSInt(io.req.bits.addrRequest) @[BabyKyber.scala 69:51]
      bkyber.addr_Req <= _bkyber_io_addr_Req_T @[BabyKyber.scala 69:24]
      bkyber.wen_Req <= io.req.bits.isWrite @[BabyKyber.scala 70:23]
      bkyber.bytelane_Req <= io.req.bits.activeByteLane @[BabyKyber.scala 71:28]
      rdata <= bkyber.data_Resp @[BabyKyber.scala 72:11]
      validReg <= UInt<1>("h01") @[BabyKyber.scala 73:14]
      skip @[BabyKyber.scala 66:45]
    else : @[BabyKyber.scala 74:52]
      node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[BabyKyber.scala 74:30]
      node _T_2 = and(io.req.valid, _T_1) @[BabyKyber.scala 74:27]
      when _T_2 : @[BabyKyber.scala 74:52]
        validReg <= UInt<1>("h01") @[BabyKyber.scala 76:14]
        bkyber.wen_Req <= UInt<1>("h00") @[BabyKyber.scala 77:23]
        node _bkyber_io_addr_Req_T_1 = asSInt(io.req.bits.addrRequest) @[BabyKyber.scala 78:51]
        bkyber.addr_Req <= _bkyber_io_addr_Req_T_1 @[BabyKyber.scala 78:24]
        rdata <= bkyber.data_Resp @[BabyKyber.scala 79:11]
        skip @[BabyKyber.scala 74:52]
      else : @[BabyKyber.scala 80:15]
        validReg <= UInt<1>("h00") @[BabyKyber.scala 81:14]
        rdata is invalid @[BabyKyber.scala 82:11]
        skip @[BabyKyber.scala 80:15]
    node _io_rsp_bits_dataResponse_T = asUInt(rdata) @[BabyKyber.scala 85:37]
    io.rsp.bits.dataResponse <= _io_rsp_bits_dataResponse_T @[BabyKyber.scala 85:28]
    io.rsp.bits.error <= UInt<1>("h00") @[BabyKyber.scala 86:21]
    
  module BabyKyberHarness : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip enable : UInt<1>, flip key_enable : UInt<1>, flip encryption_enable : UInt<1>, flip decryption_enable : UInt<1>, cio_babykyber_intr_key : UInt<1>, cio_babykyber_intr_encrypt : UInt<1>, cio_babykyber_intr_decrypt : UInt<1>}
    
    inst hostAdapter of WishboneHost @[BabyKyberHarness.scala 27:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[BabyKyberHarness.scala 28:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst babykyber of BabyKyberTop @[BabyKyberHarness.scala 29:25]
    babykyber.clock <= clock
    babykyber.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[BabyKyberHarness.scala 31:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[BabyKyberHarness.scala 31:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[BabyKyberHarness.scala 31:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[BabyKyberHarness.scala 31:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[BabyKyberHarness.scala 31:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[BabyKyberHarness.scala 31:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[BabyKyberHarness.scala 32:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[BabyKyberHarness.scala 32:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[BabyKyberHarness.scala 32:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[BabyKyberHarness.scala 32:10]
    deviceAdapter.io.wbMasterReceiver.bits.sel <= hostAdapter.io.wbMasterTransmitter.bits.sel @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.bits.dat <= hostAdapter.io.wbMasterTransmitter.bits.dat @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.bits.adr <= hostAdapter.io.wbMasterTransmitter.bits.adr @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.bits.we <= hostAdapter.io.wbMasterTransmitter.bits.we @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.bits.stb <= hostAdapter.io.wbMasterTransmitter.bits.stb @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.bits.cyc <= hostAdapter.io.wbMasterTransmitter.bits.cyc @[BabyKyberHarness.scala 33:38]
    deviceAdapter.io.wbMasterReceiver.valid <= hostAdapter.io.wbMasterTransmitter.valid @[BabyKyberHarness.scala 33:38]
    hostAdapter.io.wbMasterTransmitter.ready <= deviceAdapter.io.wbMasterReceiver.ready @[BabyKyberHarness.scala 33:38]
    hostAdapter.io.wbSlaveReceiver.bits.err <= deviceAdapter.io.wbSlaveTransmitter.bits.err @[BabyKyberHarness.scala 34:34]
    hostAdapter.io.wbSlaveReceiver.bits.dat <= deviceAdapter.io.wbSlaveTransmitter.bits.dat @[BabyKyberHarness.scala 34:34]
    hostAdapter.io.wbSlaveReceiver.bits.ack <= deviceAdapter.io.wbSlaveTransmitter.bits.ack @[BabyKyberHarness.scala 34:34]
    hostAdapter.io.wbSlaveReceiver.valid <= deviceAdapter.io.wbSlaveTransmitter.valid @[BabyKyberHarness.scala 34:34]
    deviceAdapter.io.wbSlaveTransmitter.ready <= hostAdapter.io.wbSlaveReceiver.ready @[BabyKyberHarness.scala 34:34]
    babykyber.io.req.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[BabyKyberHarness.scala 36:20]
    babykyber.io.req.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[BabyKyberHarness.scala 36:20]
    babykyber.io.req.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[BabyKyberHarness.scala 36:20]
    babykyber.io.req.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[BabyKyberHarness.scala 36:20]
    babykyber.io.req.valid <= deviceAdapter.io.reqOut.valid @[BabyKyberHarness.scala 36:20]
    deviceAdapter.io.reqOut.ready <= babykyber.io.req.ready @[BabyKyberHarness.scala 36:20]
    deviceAdapter.io.rspIn.bits.error <= babykyber.io.rsp.bits.error @[BabyKyberHarness.scala 37:20]
    deviceAdapter.io.rspIn.bits.dataResponse <= babykyber.io.rsp.bits.dataResponse @[BabyKyberHarness.scala 37:20]
    deviceAdapter.io.rspIn.valid <= babykyber.io.rsp.valid @[BabyKyberHarness.scala 37:20]
    babykyber.io.rsp.ready <= deviceAdapter.io.rspIn.ready @[BabyKyberHarness.scala 37:20]
    babykyber.io.enable <= io.enable @[BabyKyberHarness.scala 40:23]
    babykyber.io.key_enable <= io.key_enable @[BabyKyberHarness.scala 41:27]
    babykyber.io.encryption_enable <= io.encryption_enable @[BabyKyberHarness.scala 42:34]
    babykyber.io.decryption_enable <= io.decryption_enable @[BabyKyberHarness.scala 43:34]
    io.cio_babykyber_intr_key <= babykyber.io.cio_babykyber_intr_key @[BabyKyberHarness.scala 46:29]
    io.cio_babykyber_intr_encrypt <= babykyber.io.cio_babykyber_intr_encrypt @[BabyKyberHarness.scala 47:33]
    io.cio_babykyber_intr_decrypt <= babykyber.io.cio_babykyber_intr_decrypt @[BabyKyberHarness.scala 48:33]
    
